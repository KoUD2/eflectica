import { Controller } from "@hotwired/stimulus";

export default class extends Controller {
  static targets = ["dropdown", "toggleButton", "effectSection"];

  connect() {
    // –ó–∞–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
    document.addEventListener("click", this.handleOutsideClick.bind(this));

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏
    this.initializeView();
  }

  initializeView() {
    this.effectSectionTargets.forEach((section) => {
      const sectionCategory = section.dataset.category;
      const defaultSections = ["photoProcessing", "3dGrafics", "motion"];

      if (defaultSections.includes(sectionCategory)) {
        section.style.display = "flex";
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –±–∞–∑–æ–≤—ã—Ö —Å–µ–∫—Ü–∏—è—Ö
        const effectCards = section.querySelectorAll(".O_EffectCollectionCard");
        effectCards.forEach((card) => {
          card.style.display = "flex";
        });
      } else {
        section.style.display = "none";
      }
    });
  }

  disconnect() {
    document.removeEventListener("click", this.handleOutsideClick.bind(this));
  }

  toggle(event) {
    event.preventDefault();
    const dropdown = this.dropdownTarget;
    const isVisible = dropdown.style.display !== "none";

    if (isVisible) {
      dropdown.style.display = "none";
    } else {
      dropdown.style.display = "flex";
    }
  }

  handleOutsideClick(event) {
    if (!this.element.contains(event.target)) {
      this.dropdownTarget.style.display = "none";
    }
  }

  filterEffects(event) {
    const selectedCategories = [];
    const checkboxes = this.element.querySelectorAll(
      'input[type="checkbox"]:checked'
    );

    checkboxes.forEach((checkbox) => {
      selectedCategories.push(checkbox.value);
    });

    console.log("Selected categories:", selectedCategories);

    // –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    const allEffectCards = document.querySelectorAll(".O_EffectCollectionCard");
    console.log(`Total effect cards found: ${allEffectCards.length}`);
    allEffectCards.forEach((card, index) => {
      const effectCategories = card.dataset.categories
        ? card.dataset.categories.split(",")
        : [];
      console.log(
        `Effect ${index + 1}: "${
          card.dataset.name
        }" has categories: [${effectCategories.join(", ")}]`
      );
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log(
      "Available sections:",
      this.effectSectionTargets.map((s) => s.dataset.category)
    );
    this.effectSectionTargets.forEach((section) => {
      const sectionCategory = section.dataset.category;
      console.log("Processing section:", sectionCategory);

      if (selectedCategories.length === 0) {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ 3 —Å–µ–∫—Ü–∏–∏
        const defaultSections = ["photoProcessing", "3dGrafics", "motion"];
        if (defaultSections.includes(sectionCategory)) {
          section.style.display = "flex";
          console.log("Showing default section:", sectionCategory);
        } else {
          section.style.display = "none";
          console.log("Hiding non-default section:", sectionCategory);
        }
      } else {
        // –ü—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if (selectedCategories.includes(sectionCategory)) {
          section.style.display = "flex";
          console.log("Showing filtered section:", sectionCategory);
        } else {
          section.style.display = "none";
          console.log("Hiding filtered section:", sectionCategory);
        }
      }

      // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≤–∏–¥–∏–º–æ–π —Å–µ–∫—Ü–∏–∏
      if (section.style.display !== "none") {
        const effectCards = section.querySelectorAll(".O_EffectCollectionCard");
        console.log(
          `Found ${effectCards.length} effect cards in section ${sectionCategory}`
        );

        let visibleEffectsCount = 0;

        effectCards.forEach((card) => {
          const effectCategories = card.dataset.categories
            ? card.dataset.categories.split(",")
            : [];
          console.log(
            "Effect categories:",
            effectCategories,
            "for card:",
            card.dataset.name
          );

          // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–∏—Å–∫—É
          const searchInput = document.querySelector(
            '[data-search-effects-target="input"]'
          );
          const searchQuery = searchInput
            ? searchInput.value.trim().toLowerCase()
            : "";
          const effectName = (card.dataset.name || "").toLowerCase();
          const effectDescription = (
            card.dataset.description || ""
          ).toLowerCase();

          const matchesSearch =
            searchQuery === "" ||
            effectName.includes(searchQuery) ||
            effectDescription.includes(searchQuery);

          console.log(
            `Card ${card.dataset.name}: searchQuery="${searchQuery}", matchesSearch=${matchesSearch}`
          );

          if (selectedCategories.length === 0) {
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –≤–∏–¥–∏–º—ã—Ö —Å–µ–∫—Ü–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∏—Å–∫—É
            if (matchesSearch) {
              card.style.display = "flex";
              visibleEffectsCount++;
            } else {
              card.style.display = "none";
            }
          } else {
            // –ü—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–∏—Å–∫—É
            const hasMatchingCategory = effectCategories.some((category) =>
              selectedCategories.includes(category)
            );
            console.log(
              `Effect "${
                card.dataset.name
              }": effectCategories=[${effectCategories.join(
                ","
              )}], hasMatchingCategory=${hasMatchingCategory}, matchesSearch=${matchesSearch}`
            );
            if (hasMatchingCategory && matchesSearch) {
              card.style.display = "flex";
              visibleEffectsCount++;
              console.log(`‚úÖ Showing effect: ${card.dataset.name}`);
            } else {
              card.style.display = "none";
              console.log(
                `‚ùå Hiding effect: ${card.dataset.name} (hasMatchingCategory=${hasMatchingCategory}, matchesSearch=${matchesSearch})`
              );
            }
          }
        });

        // –°–∫—Ä—ã—Ç—å —Å–µ–∫—Ü–∏—é, –µ—Å–ª–∏ –≤ –Ω–µ–π –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if (visibleEffectsCount === 0) {
          section.style.display = "none";
          console.log(
            `üö´ Hiding section ${sectionCategory} - no visible effects`
          );
        } else {
          console.log(
            `‚úÖ Section ${sectionCategory} has ${visibleEffectsCount} visible effects`
          );
        }
      }
    });
  }
}
